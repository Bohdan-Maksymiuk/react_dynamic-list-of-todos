{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","selectUser","changeTodoStatus","handleQuery","titleQuery","handleStatus","statusQuery","className","htmlFor","type","id","value","onChange","map","todo","classnames","completed","checked","title","onClick","userId","getData","url","fetch","then","response","json","CurrentUser","state","user","a","this","loadUserData","prevProps","setState","name","email","phone","removeUser","React","Component","App","selectedUserId","event","currentTarget","target","todoCopy","clearUserSelection","getPreparedTodos","isCompletedStatus","filter","toLowerCase","includes","todosFromServer","preparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9536fcf.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  changeTodoStatus: (id: number) => void;\n  handleQuery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  titleQuery: string,\n  handleStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  statusQuery: string,\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos, selectUser, changeTodoStatus,\n    handleQuery, titleQuery,\n    handleStatus, statusQuery,\n  } = props;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label htmlFor=\"titleQuery\">\n        Find by Title:\n        {' '}\n        <input\n          type=\"text\"\n          id=\"titleQuery\"\n          value={titleQuery}\n          onChange={handleQuery}\n        />\n      </label>\n\n      <select value={statusQuery} onChange={handleStatus}>\n        <option value=\"\">all</option>\n        <option value=\"completed\">completed</option>\n        <option value=\"active\">active</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label htmlFor={`checkbox-${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`checkbox-${todo.id}`}\n                  checked={todo.completed}\n                  onChange={() => changeTodoStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst BASE_URL = 'https://mate.academy/students-api/';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  removeUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadUserData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserData();\n    }\n  }\n\n  async loadUserData() {\n    const user: User = await getUser(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render(): React.ReactNode {\n    if (!this.state.user) {\n      return (\n        <span>No user was founded</span>\n      );\n    }\n\n    const {\n      id, name, email, phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${id}`}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => this.props.removeUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n  titleQuery: string,\n  statusQuery: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    titleQuery: '',\n    statusQuery: '',\n  };\n\n  async componentDidMount() {\n    const todosFromServer = await getTodos();\n\n    this.setState({\n      todos: todosFromServer,\n    });\n  }\n\n  handleStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ statusQuery: event.currentTarget.value });\n  };\n\n  handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ titleQuery: event.target.value });\n  };\n\n  changeTodoStatus = (id: number) => {\n    const todoCopy = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todoCopy,\n    }));\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUserSelection = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  getPreparedTodos = () => {\n    const { todos, titleQuery, statusQuery } = this.state;\n    let isCompletedStatus: boolean;\n\n    switch (statusQuery) {\n      case 'active':\n        isCompletedStatus = false;\n        break;\n      case 'completed':\n        isCompletedStatus = true;\n        break;\n      default:\n        return todos.filter(todo => (\n          todo.title.toLowerCase()\n            .includes(titleQuery.toLowerCase())\n        ));\n    }\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase()\n        .includes(titleQuery.toLowerCase())\n        && (isCompletedStatus ? todo.completed : !todo.completed)\n    ));\n  };\n\n  render() {\n    const { selectedUserId, titleQuery, statusQuery } = this.state;\n    const preparedTodos = this.getPreparedTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            changeTodoStatus={this.changeTodoStatus}\n            handleQuery={this.handleQuery}\n            titleQuery={titleQuery}\n            handleStatus={this.handleStatus}\n            statusQuery={statusQuery}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                removeUser={this.clearUserSelection}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}