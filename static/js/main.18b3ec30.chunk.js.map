{"version":3,"sources":["components/TodoList/TodoList.tsx","App.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["CompletionStatus","TodoList","props","todos","selectUser","changeTodoStatus","handleQuery","titleQuery","handleStatus","statusQuery","className","htmlFor","type","id","value","onChange","All","Completed","Active","map","todo","classnames","completed","checked","title","onClick","userId","getData","url","fetch","then","response","json","CurrentUser","state","user","a","this","loadUserData","prevProps","setState","name","email","phone","clearUser","React","Component","App","selectedUserId","event","currentTarget","target","todoCopy","clearUserSelection","getPreparedTodos","isCompletedStatus","titleQueryToLowerCase","toLowerCase","filter","includes","todosFromServer","preparedTodos","ReactDOM","render","document","getElementById"],"mappings":"gPAIKA,E,2JAAAA,K,OAAAA,E,sBAAAA,E,iBAAAA,M,KAgBE,ICbFA,EDaQC,EAA4B,SAACC,GACxC,IACEC,EAOED,EAPFC,MACAC,EAMEF,EANFE,WACAC,EAKEH,EALFG,iBACAC,EAIEJ,EAJFI,YACAC,EAGEL,EAHFK,WACAC,EAEEN,EAFFM,aACAC,EACEP,EADFO,YAGF,OACE,sBAAKC,UAAU,WAAf,UACE,wCACA,wBAAOC,QAAQ,aAAf,2BAEG,IACD,uBACEC,KAAK,OACLC,GAAG,aACHC,MAAOP,EACPQ,SAAUT,OAId,yBAAQQ,MAAOL,EAAaM,SAAUP,EAAtC,UACE,wBAAQM,MAAOd,EAAiBgB,IAAhC,iBACA,wBAAQF,MAAOd,EAAiBiB,UAAhC,uBACA,wBAAQH,MAAOd,EAAiBkB,OAAhC,uBAGF,qBAAKR,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGP,EAAMgB,KAAI,SAAAC,GAAI,OACb,qBAEEV,UAAWW,IACT,iBACA,CACE,0BAA2BD,EAAKE,UAAW,6BAA8BF,EAAKE,YALpF,UASE,wBAAOX,QAAO,mBAAcS,EAAKP,IAAjC,UACE,uBACED,KAAK,WACLC,GAAE,mBAAcO,EAAKP,IACrBU,QAASH,EAAKE,UACdP,SAAU,kBAAMV,EAAiBe,EAAKP,OAExC,4BAAIO,EAAKI,WAGX,yBACEd,UAAU,iEAKVE,KAAK,SACLa,QAAS,kBAAMrB,EAAWgB,EAAKM,SAPjC,sBAUGN,EAAKM,YA5BHN,EAAKP,eEpDlBc,G,MAAU,SAACC,GACf,OAAOC,MAAM,GAAD,OAHG,sCAGH,OAAeD,IACxBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCSlBC,EAAb,4MACEC,MAAe,CACbC,KAAM,MAFV,8FAKE,sBAAAC,EAAA,sDACEC,KAAKC,eADP,gDALF,sFASE,SAAmBC,GACbA,EAAUb,SAAWW,KAAKnC,MAAMwB,QAClCW,KAAKC,iBAXX,iEAeE,4BAAAF,EAAA,sEDnBsBV,ECoBaW,KAAKnC,MAAMwB,ODpBUC,EAAQ,SAAD,OAAUD,ICmBzE,OACQS,EADR,OAGEE,KAAKG,SAAS,CACZL,SAJJ,iCDnBqB,IAACT,ICmBtB,YAfF,0EAuBE,WACE,IAAKW,KAAKH,MAAMC,KACd,OACE,uDAIJ,MAEIE,KAAKH,MAAMC,KADbtB,EADF,EACEA,GAAI4B,EADN,EACMA,KAAMC,EADZ,EACYA,MAAOC,EADnB,EACmBA,MAGnB,OACE,sBAAKjC,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,wDAAyBG,OAE5D,oBAAIH,UAAU,oBAAd,SAAmC+B,IACnC,mBAAG/B,UAAU,qBAAb,SAAmCgC,IACnC,mBAAGhC,UAAU,qBAAb,SAAmCiC,IAEnC,wBACEjC,UAAU,SACVE,KAAK,SACLa,QAASY,KAAKnC,MAAM0C,UAHtB,0BA1CR,GAAiCC,IAAMC,Y,SFPlC9C,K,OAAAA,E,sBAAAA,E,iBAAAA,M,SAaC+C,E,4MACJb,MAAe,CACbc,eAAgB,EAChB7C,MAAO,GACPI,WAAY,GACZE,YAAaT,EAAiBgB,K,EAWhCR,aAAe,SAACyC,GACd,EAAKT,SAAS,CAAE/B,YAAawC,EAAMC,cAAcpC,S,EAGnDR,YAAc,SAAC2C,GACb,EAAKT,SAAS,CAAEjC,WAAY0C,EAAME,OAAOrC,S,EAG3CT,iBAAmB,SAACQ,GAClB,IAAMuC,EAAW,EAAKlB,MAAM/B,MAAMgB,KAAI,SAAAC,GACpC,OAAIA,EAAKP,KAAOA,EACP,2BAAKO,GAAZ,IAAkBE,WAAYF,EAAKE,YAG9BF,KAGT,EAAKoB,UAAS,iBAAO,CACnBrC,MAAOiD,O,EAIXhD,WAAa,SAACsB,GACZ,EAAKc,SAAS,CACZQ,eAAgBtB,K,EAIpB2B,mBAAqB,WACnB,EAAKb,SAAS,CACZQ,eAAgB,K,EAIpBM,iBAAmB,WACjB,IAEIC,EAFJ,EAA2C,EAAKrB,MAAxC/B,EAAR,EAAQA,MAAOI,EAAf,EAAeA,WAAYE,EAA3B,EAA2BA,YACrB+C,EAAwBjD,EAAWkD,cAGzC,OAAQhD,GACN,KAAKT,EAAiBkB,OACpBqC,GAAoB,EACpB,MACF,KAAKvD,EAAiBiB,UACpBsC,GAAoB,EACpB,MACF,QACE,OAAOpD,EAAMuD,QAAO,SAAAtC,GAAI,OACtBA,EAAKI,MAAMiC,cACRE,SAASH,MAIlB,OAAOrD,EAAMuD,QAAO,SAAAtC,GAAI,OACtBA,EAAKI,MAAMiC,cACRE,SAASpD,EAAWkD,iBACjBF,EAAoBnC,EAAKE,WAAaF,EAAKE,e,8FAhErD,4BAAAc,EAAA,sECpB6CT,EAAQ,SDoBrD,OACQiC,EADR,OAGEvB,KAAKG,SAAS,CACZrC,MAAM,YAAKyD,KAJf,gD,0EAoEA,WACE,MAAoDvB,KAAKH,MAAjDc,EAAR,EAAQA,eAAgBzC,EAAxB,EAAwBA,WAAYE,EAApC,EAAoCA,YAC9BoD,EAAgBxB,KAAKiB,mBAE3B,OACE,sBAAK5C,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEP,MAAO0D,EACPzD,WAAYiC,KAAKjC,WACjBC,iBAAkBgC,KAAKhC,iBACvBC,YAAa+B,KAAK/B,YAClBC,WAAYA,EACZC,aAAc6B,KAAK7B,aACnBC,YAAaA,MAIjB,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGsC,EACC,cAAC,EAAD,CACEtB,OAAQsB,EACRJ,UAAWP,KAAKgB,qBAEhB,8B,GArGER,IAAMC,WA6GTC,IG9Hfe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.18b3ec30.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\n\nenum CompletionStatus {\n  All = '',\n  Completed = 'completed',\n  Active = 'active',\n}\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  changeTodoStatus: (id: number) => void;\n  handleQuery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  titleQuery: string,\n  handleStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  statusQuery: string,\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos,\n    selectUser,\n    changeTodoStatus,\n    handleQuery,\n    titleQuery,\n    handleStatus,\n    statusQuery,\n  } = props;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label htmlFor=\"titleQuery\">\n        Find by Title:\n        {' '}\n        <input\n          type=\"text\"\n          id=\"titleQuery\"\n          value={titleQuery}\n          onChange={handleQuery}\n        />\n      </label>\n\n      <select value={statusQuery} onChange={handleStatus}>\n        <option value={CompletionStatus.All}>all</option>\n        <option value={CompletionStatus.Completed}>completed</option>\n        <option value={CompletionStatus.Active}>active</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed, 'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label htmlFor={`checkbox-${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`checkbox-${todo.id}`}\n                  checked={todo.completed}\n                  onChange={() => changeTodoStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nenum CompletionStatus {\n  All = '',\n  Completed = 'completed',\n  Active = 'active',\n}\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n  titleQuery: string,\n  statusQuery: CompletionStatus,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    titleQuery: '',\n    statusQuery: CompletionStatus.All,\n  };\n\n  async componentDidMount() {\n    const todosFromServer = await getTodos();\n\n    this.setState({\n      todos: [...todosFromServer],\n    });\n  }\n\n  handleStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ statusQuery: event.currentTarget.value as CompletionStatus });\n  };\n\n  handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ titleQuery: event.target.value });\n  };\n\n  changeTodoStatus = (id: number) => {\n    const todoCopy = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todoCopy,\n    }));\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUserSelection = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  getPreparedTodos = () => {\n    const { todos, titleQuery, statusQuery } = this.state;\n    const titleQueryToLowerCase = titleQuery.toLowerCase();\n    let isCompletedStatus: boolean;\n\n    switch (statusQuery) {\n      case CompletionStatus.Active:\n        isCompletedStatus = false;\n        break;\n      case CompletionStatus.Completed:\n        isCompletedStatus = true;\n        break;\n      default:\n        return todos.filter(todo => (\n          todo.title.toLowerCase()\n            .includes(titleQueryToLowerCase)\n        ));\n    }\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase()\n        .includes(titleQuery.toLowerCase())\n        && (isCompletedStatus ? todo.completed : !todo.completed)\n    ));\n  };\n\n  render() {\n    const { selectedUserId, titleQuery, statusQuery } = this.state;\n    const preparedTodos = this.getPreparedTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            changeTodoStatus={this.changeTodoStatus}\n            handleQuery={this.handleQuery}\n            titleQuery={titleQuery}\n            handleStatus={this.handleStatus}\n            statusQuery={statusQuery}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUserSelection}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst BASE_URL = 'https://mate.academy/students-api/';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadUserData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserData();\n    }\n  }\n\n  async loadUserData() {\n    const user: User = await getUser(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render(): React.ReactNode {\n    if (!this.state.user) {\n      return (\n        <span>No user was founded</span>\n      );\n    }\n\n    const {\n      id, name, email, phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${id}`}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}